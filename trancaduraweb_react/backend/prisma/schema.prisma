generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  labs      UserLab[]
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  roles    UserRole[]
  pinCodes DevicePinCode[]
  cards    UserCard[]
  accesses UserAccess[]

  @@map("users")
}

model Lab {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  users    UserLab[]
  deviceId Int?      @unique @map("device_id")
  device   Device?   @relation(fields: [deviceId], references: [id])
}

model UserLab {
  id     Int  @id @default(autoincrement())
  userId Int
  labId  Int
  isStaff Boolean @default(false)

  user   User @relation(fields: [userId], references: [id])
  lab    Lab  @relation(fields: [labId], references: [id])

  @@unique([userId, labId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  userRoles   UserRole[]
  deviceRoles DeviceRole[]

  @@map("roles")
}

model UserRole {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  roleId Int @map("role_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Device {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique
  macAddress String?  @unique @map("mac_address")
  section    String?
  location   String?
  ipAddress  String?  @map("ip_address")
  apiToken   String?  @unique @map("api_token")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  roles    DeviceRole[]
  pinCodes DevicePinCode[]
  accesses UserAccess[]

  lab Lab?

  @@map("devices")
}

model DeviceRole {
  id       Int @id @default(autoincrement())
  deviceId Int @map("device_id")
  roleId   Int @map("role_id")

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([deviceId, roleId])
  @@map("device_roles")
}

model DevicePinCode {
  id        Int       @id @default(autoincrement())
  deviceId  Int       @map("device_id")
  userId    Int       @map("user_id")
  pin       Int
  dateInit  DateTime? @map("date_init")
  dateStop  DateTime? @map("date_stop")
  createdAt DateTime  @default(now()) @map("created_at")

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_pin_codes")
}

model Approximation {
  id         Int      @id @default(autoincrement())
  cardId     String   @unique @map("card_id")
  name       String?  @default("empty")
  permission Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  userCards UserCard[]

  @@map("approximations")
}

model UserCard {
  id              Int @id @default(autoincrement())
  userId          Int @map("user_id")
  approximationId Int @map("approximation_id")

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  approximation Approximation @relation(fields: [approximationId], references: [id], onDelete: Cascade)

  @@unique([userId, approximationId])
  @@map("user_cards")
}

model UserAccess {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  deviceId   Int      @map("device_id")
  date       DateTime @default(now())
  permission Boolean  @default(false)

  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@map("user_accesses")
}
